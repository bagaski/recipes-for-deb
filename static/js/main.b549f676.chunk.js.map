{"version":3,"sources":["Recipe.js","Time.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","url","image","className","href","src","alt","Time","checkTime","i","startTime","today","Date","h","getHours","m","getMinutes","s","getSeconds","document","getElementById","innerHTML","setTimeout","id","Footer","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","typeof","placeholder","value","onChange","target","autoFocus","map","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAceA,EAZA,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,MAE3B,OACE,yBAAKC,UAAU,QACb,uBAAGC,KAAMH,GAAK,yBAAKI,IAAKH,EAAOI,IAAI,MACnC,4BAAKN,GACL,2BAAG,uBAAGI,KAAMH,GAAT,oB,OCuBMM,EA7BF,WAEX,IAAMC,EAAY,SAACC,GAIf,OAHIA,EAAI,KACJA,EAAI,IAAMA,GAEPA,GAGLC,EAAY,SAAZA,IACF,IAAMC,EAAQ,IAAIC,KACZC,EAAIF,EAAMG,WACVC,EAAIJ,EAAMK,aACVC,EAAIN,EAAMO,aAEf,iBAADH,EAAIP,EAAUO,GACb,iBAADE,EAAIT,EAAUS,GACdE,SAASC,eAAe,UAAUC,UAAYR,EAAI,IAAME,EAAI,IAAME,EACxDK,YAAW,WACnBZ,MACC,MAEP,OACE,yBAAKa,GAAG,QACLb,ICbQc,EAVA,WAEb,OACE,yBAAKrB,UAAU,UACb,kBAAC,EAAD,MACA,gEAAqC,uBAAGC,KAAK,wDAAR,cCqD5BqB,G,MAxDH,WAEV,IAFgB,EAKcC,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOUJ,mBAAS,IAPnB,mBAOTK,EAPS,KAOFC,EAPE,KAUhBC,qBAAW,WACRC,MACC,CAACH,IAEH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAK,0CACSL,EADT,mBAbjB,WAaiB,oBAZhB,qCAWK,cACXM,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBX,EAAWW,EAAKC,MALC,2CAAH,qDAmBlB,OACE,0BAAMrC,UAAU,OAChB,gCACE,yBAAKA,UAAU,aACf,yBAAKA,UAAU,QAAf,mBACA,yBAAKA,UAAU,SAAf,+DAAmF,uBAAGC,KAAK,iCAAR,cAAnF,mLAEA,yBAAKD,UAAU,cACf,0BAAMA,UAAU,cAAcsC,SAfd,SAAAC,GAChBA,EAAEC,iBACFX,EAASH,KAcP,2BAAOe,OAAO,OAAOzC,UAAU,aAAa0C,YAAY,mBAAmBC,MAAOjB,EAAQkB,SApBzE,SAAAL,GACnBZ,EAAUY,EAAEM,OAAOF,QAmBiGG,WAAS,IAC3H,4BAAQL,OAAO,SAASzC,UAAU,iBAAlC,aAIJ,6BAASA,UAAU,SAChBwB,EAAQuB,KAAI,SAAAC,GAAM,OAAK,kBAAC,EAAD,CAAQnD,MAAOmD,EAAOA,OAAOC,MAAOnD,IAAKkD,EAAOA,OAAOlD,IAAKC,MAAQiD,EAAOA,OAAOjD,YAG1G,kBAAC,EAAD,SC5CcmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxC,SAASC,eAAe,SD6H3C,kBAAmBwC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b549f676.chunk.js","sourcesContent":["import React from 'react';\n\nconst Recipe = ({title, url, image}) => {\n\n  return (\n    <div className=\"card\">\n      <a href={url}><img src={image} alt=\"\" /></a>\n      <h1>{title}</h1>\n      <p><a href={url}>Find out more</a></p>\n    </div>\n  );\n\n}\n\nexport default Recipe;\n","import React from 'react';\n\nconst Time = () => {\n\n  const checkTime = (i) => {\n      if (i < 10) {\n          i = \"0\" + i;\n      }\n      return i;\n  }\n\n  const startTime = () => {\n      const today = new Date();\n      const h = today.getHours();\n      const m = today.getMinutes();\n      const s = today.getSeconds();\n      // add a zero in front of numbers<10\n      m = checkTime(m);\n      s = checkTime(s);\n      document.getElementById('footer').innerHTML = h + \":\" + m + \":\" + s;\n      const t = setTimeout(function () {\n        startTime()\n      }, 500);\n  }\n  return (\n    <div id=\"time\">\n      {startTime}\n    </div>\n  );\n}\n\nexport default Time;\n","import React from 'react';\nimport Time from './Time';\n\nconst Footer = () => {\n\n  return (\n    <div className=\"footer\">\n      <Time />\n      <p>Website designed and developed by <a href=\"https://bagaski.github.io/yyyiorgosss/portfolio.html\">Bagaski</a></p>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React, { useEffect, useState }  from 'react';\nimport Recipe from './Recipe';\nimport Footer from './Footer';\nimport './App.css';\n\nconst App = () => {\n\n  const APP_ID = \"f1f41a31\";\n  const APP_KEY = \"7f73723f3607f39e1d2261f1a07cb6c1\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('');\n\n\n  useEffect (() => {\n     getRecipes();\n   }, [query]);\n\n    const getRecipes = async () => {\n      const response = await fetch (\n        `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n      );\n      const data = await response.json();\n      setRecipes(data.hits);\n    }\n\n    const updateSearch = e => {\n      setSearch(e.target.value);\n    };\n\n    const getSearch = e => {\n      e.preventDefault();\n      setQuery(search);\n\n    };\n\n\n  return (\n    <main className=\"App\">\n    <header>\n      <div className=\"left-side\">\n      <div className=\"logo\">Recipes for Deb</div>\n      <div className=\"intro\">This is a website I made for Deb to search for recipes from <a href=\"https://developer.edamam.com/\">Edamam API</a>. You can use it as well whenever you feel bored of eating the same food again and again. Just enter bellow the main ingredient you are looking for and hit the search button.</div>\n      </div>\n      <div className=\"right-side\">\n      <form className=\"search-form\" onSubmit={getSearch}>\n        <input typeof=\"text\" className=\"search-bar\" placeholder=\"Chose ingredient\" value={search} onChange={updateSearch} autoFocus></input>\n        <button typeof=\"submit\" className=\"search-button\">Search</button>\n      </form>\n      </div>\n    </header>\n    <section className=\"cards\">\n      {recipes.map(recipe => (<Recipe title={recipe.recipe.label} url={recipe.recipe.url} image ={recipe.recipe.image} />\n      ))}\n      </section>\n      <Footer />\n    </main>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}